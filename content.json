{"meta":{"title":"琉心的博客","subtitle":"琉心的一个个人博客","description":"","author":"John Doe","url":"https://LiuXinDG.gitbub.io","root":"/"},"pages":[],"posts":[{"title":"嵌入式笔记","slug":"嵌入式笔记","date":"2023-06-13T12:10:45.000Z","updated":"2023-06-14T03:46:49.881Z","comments":true,"path":"2023/06/13/嵌入式笔记/","link":"","permalink":"https://liuxindg.gitbub.io/2023/06/13/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0/","excerpt":"","text":"嵌入式笔记整理第一章 嵌入式系统设计基础1.1 嵌入式系统概述1.1.1 什么是嵌入式系统嵌入式系统是以应用为中心，以计算机技术为基础，软件、硬件可剪裁，以适用于应用系统对功能、可靠性、成本、体积、功耗等要求严格的专用计算机系统。 1.1.2 嵌入式系统的技术特点四大特性：专用性、低成本、可裁剪性、可靠性 1.1.3 嵌入式系统的组成分为硬件设备和软件设备，嵌入式处理器-&gt;硬件核心。 1）嵌入式处理器类型微控制器(MCU)；嵌入式微处理器(MPU)；数字信号处理器(DSP)；片上系统(Soc) 2）嵌入式操作系统谷歌的Android系统和苹果的iOS系统。实时操作系统常用免费的uC&#x2F;OS-II或者商业化的VxWorks等。 1.2 嵌入式系统的开发1.2.1 嵌入式系统的开发模式宿主机-目标机(开发模式) 第二章 ARM Cortex-M3 处理器2.2 Cortex-M3 处理器 CM3的功能模块高性能32位RISC处理器；大量寄存器，都可用于多种用途；采用Thumb指令集结构；3级流水线（取指-译码-执行）；采用哈佛存储结构；高级微控制器总线结构 CM3的两个状态两个级别两种模式 两个状态：Thumb状态、调试状态 两个级别：特权级、非特权级 两种模式：异常处理模式、线程模式 2.3 寄存器1.通用寄存器 CM3设计有16个32位通用寄存器，R0~R12是真正意义上的通用寄存器。 2.专用寄存器 专用寄存器不通过存储器地址访问，而是使用专用寄存器访问指令 程序状态寄存器(Program Status Register,PSR) 异常屏蔽位寄存器(Exception Mask Register) 2.4 存储器组织1.位带区 别名地址&#x3D;位带基地址+字节偏移量×32+位号×4 位带基地址通常情况下为:0x22000以及0x42000 字节偏移量根据要访问的位带地址距离基地址0x2000和0x4000的偏移值 位号：题目会给 2.字节存储顺序 低位低，高位高（小端存储）；高位低，低位高（大端存储） 第四章 STM32 微控制器4.1 STM32微控制器结构4.1.2 STM32系统结构 通用输入&#x2F;输出端口(GPIO)以及复用功能的输入&#x2F;输出端口(AFIO) 通用同步&#x2F;异步接收发送器(USART)；通用异步接收发送器(UART) 串行外设接口(SPI) 内部集成电路I2C接口(I2C) 看门狗(Watch Dog)，独立看门狗(IWDG)和窗口看门狗(WWDG) 实时时钟(RTC) 通用定时器(TIMx) 模拟&#x2F;数字转换器ADC 缩写 外设名称 缩写 外设名称 adc A&#x2F;D转换器 bkp 备份寄存器 can CAN控制器局域网 cec 消费电子单元 crc CRC计算单元 dac D&#x2F;A转换器 dbgmc MCU调试模块 dma DMA控制器 exti 外部中断寄存器 flash 闪存 fsmc 灵活的静态存储器控制器 gpio 通用I&#x2F;O接口 i2c I²C总线接口 iwdg 独立看门狗 pwr 电源控制 rcc 复位和时钟控制器 rtc 实时时钟 sdio SD存储卡接口 spi SPI串行外设接口 tim 定时器 usart 通用同步异步收发器 wwdg 窗口看门狗 4.2 STM32微控制器开发4.2.3 C语言应用2. C语言的位操作123a &amp;= ~(1&lt;&lt;6) //位与实现复位:将整形变量a的D6位清零，其他位不变。a |= (1&lt;&lt;6) // 位或实现置位:将整形变量a的D6位置位，其他位不变。a ^= (1&lt;&lt;6) // 位异或实现求反：将整形变量a的D6位取反，其他位不变 4.3 复位与时钟控制(RCC)1. 电源控制3种低功耗模式 睡眠模式(Sleep Mode) 停止模式(Stop Mode) 备用模式(Standby Mode) 2. 复位三种复位：系统复位、电源复位和备份复位 3. 时钟树系统时钟 SYSCLK 内部高速时钟HIS、高速外部时钟HSE和锁相环PLL 第五章 STM32的通用I&#x2F;O端口5.1 GPIO的结构和功能GPIO一共112个引脚，用GPIOx(x是A、B、C、D、E、F、G)表示，即GPIOA GPIOB … GPIOG。每组端口有16个外设引脚，分别用Px0,Px1,…Px15(x是A~G)表示。 1.输入模式4种输入模式： 模拟输入模式(Analog): 不上拉也不下拉 浮空输入模式(Input Floating): 不上拉也不下拉 上拉输入模式(Input Pull-up): 接上拉电阻 下拉输入模式(Input Pull-down): 接下拉电阻 2. 输出模式4中输出模式，但是常用以下两种输出模式: 推挽输出(Output Push-Pull) 开漏输出(Output Open-Drain) 5.3 GPIO 案例5.3.2 应用程序分析1. 开启外设时钟2. 初始化外设3. 控制外设工作5.3.3 实例代码1234567891011HAL_GPIO_WritePin(GPIOB，GPIO_PIN_5，GPIO_PIN_RESET)；// PB5引脚输出低电平，LED0灯亮HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5,GPIO_PIN_SET);// PE5 引脚输出高电平，LED1灯灭HAL_Delay(1000) //持续1秒HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5);// 读取PC5引脚的电平状态HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);// 反转 PE3 引脚的电平状态 第六章 CM3异常和STM32中断6.1 Cortex-M3 的异常2.异常优先级优先级的数值越小，优先级越高 组优先级（Group Priority）和子优先级(Sub-Priority)。组优先级被称为抢占优先级。 组优先级确定是否可以打断正在执行的中断，实现嵌套。子优先级只用于在相同组优先级时多个子优先级同时出现的情况，高优先级别（优先级数值小）的异常首先被处理。 3. 嵌套向量中断控制器NVICNVIC 集成在 ARM Cortex-M3 内核中 6.2 STM32的中断应用6.2.1 NVIC 初始化配置1. 配置组优先级 6.2.2 外部中断EXTISTM32 芯片外设的中断请求直接连接到 NVIC，来自芯片之外的外设中断请求需要通过EXTI（外部中断&#x2F;事件控制器）连接到NVIC。 2. EXTI 寄存器 第七章 STM32 的串行通信接口7.1 串行异步通信串行通信有两类：一类是速度较快的同步串行通信，以数据块为基本传输单位，主要应用于网络连接；另一类是速度较慢的异步通信，以字符为单位传输，主要应用于近距离通信。通常所说的串行通信一般是指串行同步通信 7.1.1 串行异步通信字符格式 起始位(Start Bit): 采取逻辑 0 电平 数据位(Data Bit): 一般是8位 校验位(Parity Bit): 可有可无，一般是奇偶校验位 停止位(Stop Bit): 字符最后必须有停止位，采取逻辑1电平 通信传输速率要相同，如9600bps表示一秒传输9600位 7.1.2 串行异步通信接口1. RS-232标准的引脚定义 TxD(Transmitted Data,发送数据) RxD(Received Data, 接收数据) RTS(Request To Send，请求发送) CTS(Clear To Send，清除发送) DTR(Data Terminal Ready，数据终端准备好) DSR(Data Set Ready，数据装置准备好) GND(Ground，信号地) CD(Carrier Detected，载波检测) RI(RIng Indicator，振铃指示) 2. RS-232接口的连接三线相连 7.2 通用同步&#x2F;异步接收&#x2F;发送器通用同步&#x2F;异步接收&#x2F;发送器（USART）和通用异步接收&#x2F;发送器(UART)","categories":[],"tags":[],"author":"琉心"},{"title":"text1","slug":"text1","date":"2023-06-13T11:18:32.000Z","updated":"2023-06-13T11:23:55.046Z","comments":true,"path":"2023/06/13/text1/","link":"","permalink":"https://liuxindg.gitbub.io/2023/06/13/text1/","excerpt":"","text":"111 . 低字节位数据存放在内存低地址处，高字节位数据存放在内存高地址处，这就是小端字节序。 202.96.128.128 D 节省 银行 对10 无缓冲是同步的11。 13212 func f(a,b int) (value int, error) 13 int 和体系架构 14 其他三个 15 主键是唯一、不为空 16 direct 17 直接插入 18 堆 19 在100000 20 不选进程是动态的过程 21 不选 HTTP返回码 302 22 选 协程和线程都可以 以及 通过 channel 23 不选接口赋值 24 不选 数据库索引的存在 25 不选 POST比get安全 26 不选域名解析 27 只选快速 12 28","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-06-13T10:37:15.364Z","updated":"2023-06-13T10:37:15.364Z","comments":true,"path":"2023/06/13/hello-world/","link":"","permalink":"https://liuxindg.gitbub.io/2023/06/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}